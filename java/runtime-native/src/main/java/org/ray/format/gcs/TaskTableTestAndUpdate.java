package org.ray.format.gcs;
// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TaskTableTestAndUpdate extends Table {
  public static TaskTableTestAndUpdate getRootAsTaskTableTestAndUpdate(ByteBuffer _bb) { return getRootAsTaskTableTestAndUpdate(_bb, new TaskTableTestAndUpdate()); }
  public static TaskTableTestAndUpdate getRootAsTaskTableTestAndUpdate(ByteBuffer _bb, TaskTableTestAndUpdate obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TaskTableTestAndUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String testSchedulerId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer testSchedulerIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer testSchedulerIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int testStateBitmask() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int updateState() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createTaskTableTestAndUpdate(FlatBufferBuilder builder,
      int test_scheduler_idOffset,
      int test_state_bitmask,
      int update_state) {
    builder.startObject(3);
    TaskTableTestAndUpdate.addUpdateState(builder, update_state);
    TaskTableTestAndUpdate.addTestStateBitmask(builder, test_state_bitmask);
    TaskTableTestAndUpdate.addTestSchedulerId(builder, test_scheduler_idOffset);
    return TaskTableTestAndUpdate.endTaskTableTestAndUpdate(builder);
  }

  public static void startTaskTableTestAndUpdate(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addTestSchedulerId(FlatBufferBuilder builder, int testSchedulerIdOffset) { builder.addOffset(0, testSchedulerIdOffset, 0); }
  public static void addTestStateBitmask(FlatBufferBuilder builder, int testStateBitmask) { builder.addInt(1, testStateBitmask, 0); }
  public static void addUpdateState(FlatBufferBuilder builder, int updateState) { builder.addInt(2, updateState, 0); }
  public static int endTaskTableTestAndUpdate(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

