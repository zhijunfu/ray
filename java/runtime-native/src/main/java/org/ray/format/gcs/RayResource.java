package org.ray.format.gcs;
// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RayResource extends Table {
  public static RayResource getRootAsRayResource(ByteBuffer _bb) { return getRootAsRayResource(_bb, new RayResource()); }
  public static RayResource getRootAsRayResource(ByteBuffer _bb, RayResource obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public RayResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String resourceName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resourceNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer resourceNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public double resourceCapacity() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createRayResource(FlatBufferBuilder builder,
      int resource_nameOffset,
      double resource_capacity) {
    builder.startObject(2);
    RayResource.addResourceCapacity(builder, resource_capacity);
    RayResource.addResourceName(builder, resource_nameOffset);
    return RayResource.endRayResource(builder);
  }

  public static void startRayResource(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addResourceName(FlatBufferBuilder builder, int resourceNameOffset) { builder.addOffset(0, resourceNameOffset, 0); }
  public static void addResourceCapacity(FlatBufferBuilder builder, double resourceCapacity) { builder.addDouble(1, resourceCapacity, 0.0); }
  public static int endRayResource(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

