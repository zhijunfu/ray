package org.ray.format.gcs;
// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class HeartbeatTableData extends Table {
  public static HeartbeatTableData getRootAsHeartbeatTableData(ByteBuffer _bb) { return getRootAsHeartbeatTableData(_bb, new HeartbeatTableData()); }
  public static HeartbeatTableData getRootAsHeartbeatTableData(ByteBuffer _bb, HeartbeatTableData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public HeartbeatTableData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String clientId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clientIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer clientIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String resourcesAvailableLabel(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int resourcesAvailableLabelLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public double resourcesAvailableCapacity(int j) { int o = __offset(8); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int resourcesAvailableCapacityLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer resourcesAvailableCapacityAsByteBuffer() { return __vector_as_bytebuffer(8, 8); }
  public ByteBuffer resourcesAvailableCapacityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 8); }
  public String resourcesTotalLabel(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int resourcesTotalLabelLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public double resourcesTotalCapacity(int j) { int o = __offset(12); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int resourcesTotalCapacityLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer resourcesTotalCapacityAsByteBuffer() { return __vector_as_bytebuffer(12, 8); }
  public ByteBuffer resourcesTotalCapacityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 8); }

  public static int createHeartbeatTableData(FlatBufferBuilder builder,
      int client_idOffset,
      int resources_available_labelOffset,
      int resources_available_capacityOffset,
      int resources_total_labelOffset,
      int resources_total_capacityOffset) {
    builder.startObject(5);
    HeartbeatTableData.addResourcesTotalCapacity(builder, resources_total_capacityOffset);
    HeartbeatTableData.addResourcesTotalLabel(builder, resources_total_labelOffset);
    HeartbeatTableData.addResourcesAvailableCapacity(builder, resources_available_capacityOffset);
    HeartbeatTableData.addResourcesAvailableLabel(builder, resources_available_labelOffset);
    HeartbeatTableData.addClientId(builder, client_idOffset);
    return HeartbeatTableData.endHeartbeatTableData(builder);
  }

  public static void startHeartbeatTableData(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addClientId(FlatBufferBuilder builder, int clientIdOffset) { builder.addOffset(0, clientIdOffset, 0); }
  public static void addResourcesAvailableLabel(FlatBufferBuilder builder, int resourcesAvailableLabelOffset) { builder.addOffset(1, resourcesAvailableLabelOffset, 0); }
  public static int createResourcesAvailableLabelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startResourcesAvailableLabelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addResourcesAvailableCapacity(FlatBufferBuilder builder, int resourcesAvailableCapacityOffset) { builder.addOffset(2, resourcesAvailableCapacityOffset, 0); }
  public static int createResourcesAvailableCapacityVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startResourcesAvailableCapacityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addResourcesTotalLabel(FlatBufferBuilder builder, int resourcesTotalLabelOffset) { builder.addOffset(3, resourcesTotalLabelOffset, 0); }
  public static int createResourcesTotalLabelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startResourcesTotalLabelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addResourcesTotalCapacity(FlatBufferBuilder builder, int resourcesTotalCapacityOffset) { builder.addOffset(4, resourcesTotalCapacityOffset, 0); }
  public static int createResourcesTotalCapacityVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startResourcesTotalCapacityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endHeartbeatTableData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

