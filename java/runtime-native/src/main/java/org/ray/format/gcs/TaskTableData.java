package org.ray.format.gcs;
// automatically generated by the FlatBuffers compiler, do not modify

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TaskTableData extends Table {
  public static TaskTableData getRootAsTaskTableData(ByteBuffer _bb) { return getRootAsTaskTableData(_bb, new TaskTableData()); }
  public static TaskTableData getRootAsTaskTableData(ByteBuffer _bb, TaskTableData obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TaskTableData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int schedulingState() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String schedulerId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer schedulerIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer schedulerIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String executionDependencies() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer executionDependenciesAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer executionDependenciesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public long spillbackCount() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String taskInfo() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskInfoAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer taskInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public boolean updated() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createTaskTableData(FlatBufferBuilder builder,
      int scheduling_state,
      int scheduler_idOffset,
      int execution_dependenciesOffset,
      long spillback_count,
      int task_infoOffset,
      boolean updated) {
    builder.startObject(6);
    TaskTableData.addSpillbackCount(builder, spillback_count);
    TaskTableData.addTaskInfo(builder, task_infoOffset);
    TaskTableData.addExecutionDependencies(builder, execution_dependenciesOffset);
    TaskTableData.addSchedulerId(builder, scheduler_idOffset);
    TaskTableData.addSchedulingState(builder, scheduling_state);
    TaskTableData.addUpdated(builder, updated);
    return TaskTableData.endTaskTableData(builder);
  }

  public static void startTaskTableData(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addSchedulingState(FlatBufferBuilder builder, int schedulingState) { builder.addInt(0, schedulingState, 0); }
  public static void addSchedulerId(FlatBufferBuilder builder, int schedulerIdOffset) { builder.addOffset(1, schedulerIdOffset, 0); }
  public static void addExecutionDependencies(FlatBufferBuilder builder, int executionDependenciesOffset) { builder.addOffset(2, executionDependenciesOffset, 0); }
  public static void addSpillbackCount(FlatBufferBuilder builder, long spillbackCount) { builder.addLong(3, spillbackCount, 0L); }
  public static void addTaskInfo(FlatBufferBuilder builder, int taskInfoOffset) { builder.addOffset(4, taskInfoOffset, 0); }
  public static void addUpdated(FlatBufferBuilder builder, boolean updated) { builder.addBoolean(5, updated, false); }
  public static int endTaskTableData(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

